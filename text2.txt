<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>

	<session-factory>
		<!-- Database connection settings -->
		<property name="connection.driver_class">com.microsoft.sqlserver.jdbc.SQLServerDriver</property>
		<property name="connection.url">jdbc:sqlserver://localhost:1433;database=QuanLySinhVien;encrypt=true;trustServerCertificate=true</property>
		<property name="connection.username">sa</property>
		<property name="connection.password">sapassword</property>
		<property name="dialect">
            org.hibernate.dialect.SQLServerDialect
        </property>
        <property name="current_session_context_class">thread</property>
		<!-- Echo all executed SQL to stdout -->
		<property name="show_sql">true</property>
		<property name="format_sql">true</property>

	</session-factory>
</hibernate-configuration>
  
  
  <dependencies>
	  <dependency>
	    <groupId>org.hibernate</groupId>
	    <artifactId>hibernate-core-jakarta</artifactId>
	    <version>5.6.12.Final</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jaxb</groupId>
	    <artifactId>jaxb-runtime</artifactId>
	    <version>3.0.0</version>
	</dependency>

	<dependency>
	    <groupId>com.microsoft.sqlserver</groupId>
	    <artifactId>mssql-jdbc</artifactId>
	    <version>11.2.0.jre11</version>
	</dependency>
  </dependencies>
  
  
  SessionFactory sessionFactory;
	
	public HibernateUtil() {
		ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
				.configure()
				.build();
		
		Metadata metadata = new MetadataSources(serviceRegistry)
				.addAnnotatedClass(LopHoc.class)
				.addAnnotatedClass(HoSoLopHoc.class)
				.addAnnotatedClass(DiaChi.class)
				.addAnnotatedClass(SinhVien.class)
				.addAnnotatedClass(MonHoc.class)
				.addAnnotatedClass(BangDiem.class)
				.getMetadataBuilder()
				.build();
		
		SessionFactory sessionFactory = metadata
				.getSessionFactoryBuilder()
				.build();
		this.sessionFactory = sessionFactory;
	}
	
	
	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

//	public void createEntity() {
//		Session session = sessionFactory.getCurrentSession();
//		Transaction tr = session.getTransaction();
//		try {
//			tr.begin();
//			
//			tr.commit();
//		} catch (Exception e) {
//			tr.rollback();
//		}
//	}